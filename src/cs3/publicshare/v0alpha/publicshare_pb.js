/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var cs3_publicshare_v0alpha_resources_pb = require('../../../cs3/publicshare/v0alpha/resources_pb.js');
var cs3_rpc_status_pb = require('../../../cs3/rpc/status_pb.js');
var google_api_annotations_pb = require('../../../google/api/annotations_pb.js');
goog.exportSymbol('proto.cs3.publicsharev0alpha.CreatePublicShareRequest', null, global);
goog.exportSymbol('proto.cs3.publicsharev0alpha.CreatePublicShareResponse', null, global);
goog.exportSymbol('proto.cs3.publicsharev0alpha.GetPublicShareByTokenRequest', null, global);
goog.exportSymbol('proto.cs3.publicsharev0alpha.GetPublicShareByTokenResponse', null, global);
goog.exportSymbol('proto.cs3.publicsharev0alpha.GetPublicShareRequest', null, global);
goog.exportSymbol('proto.cs3.publicsharev0alpha.GetPublicShareResponse', null, global);
goog.exportSymbol('proto.cs3.publicsharev0alpha.ListPublicSharesRequest', null, global);
goog.exportSymbol('proto.cs3.publicsharev0alpha.ListPublicSharesResponse', null, global);
goog.exportSymbol('proto.cs3.publicsharev0alpha.RevokePublicShareRequest', null, global);
goog.exportSymbol('proto.cs3.publicsharev0alpha.RevokePublicShareResponse', null, global);
goog.exportSymbol('proto.cs3.publicsharev0alpha.UpdatePublicShareRequest', null, global);
goog.exportSymbol('proto.cs3.publicsharev0alpha.UpdatePublicShareResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.publicsharev0alpha.CreatePublicShareRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.publicsharev0alpha.CreatePublicShareRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cs3.publicsharev0alpha.CreatePublicShareRequest.displayName = 'proto.cs3.publicsharev0alpha.CreatePublicShareRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.publicsharev0alpha.CreatePublicShareRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.publicsharev0alpha.CreatePublicShareRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.publicsharev0alpha.CreatePublicShareRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicsharev0alpha.CreatePublicShareRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    filename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    permission: jspb.Message.getFieldWithDefault(msg, 2, 0),
    password: jspb.Message.getFieldWithDefault(msg, 3, ""),
    expiration: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.publicsharev0alpha.CreatePublicShareRequest}
 */
proto.cs3.publicsharev0alpha.CreatePublicShareRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.publicsharev0alpha.CreatePublicShareRequest;
  return proto.cs3.publicsharev0alpha.CreatePublicShareRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.publicsharev0alpha.CreatePublicShareRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.publicsharev0alpha.CreatePublicShareRequest}
 */
proto.cs3.publicsharev0alpha.CreatePublicShareRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 2:
      var value = /** @type {!proto.cs3.publicsharev0alpha.Permission} */ (reader.readEnum());
      msg.setPermission(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExpiration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.publicsharev0alpha.CreatePublicShareRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.publicsharev0alpha.CreatePublicShareRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.publicsharev0alpha.CreatePublicShareRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicsharev0alpha.CreatePublicShareRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPermission();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getExpiration();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional string filename = 1;
 * @return {string}
 */
proto.cs3.publicsharev0alpha.CreatePublicShareRequest.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.cs3.publicsharev0alpha.CreatePublicShareRequest.prototype.setFilename = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Permission permission = 2;
 * @return {!proto.cs3.publicsharev0alpha.Permission}
 */
proto.cs3.publicsharev0alpha.CreatePublicShareRequest.prototype.getPermission = function() {
  return /** @type {!proto.cs3.publicsharev0alpha.Permission} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.cs3.publicsharev0alpha.Permission} value */
proto.cs3.publicsharev0alpha.CreatePublicShareRequest.prototype.setPermission = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string password = 3;
 * @return {string}
 */
proto.cs3.publicsharev0alpha.CreatePublicShareRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.cs3.publicsharev0alpha.CreatePublicShareRequest.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 expiration = 4;
 * @return {number}
 */
proto.cs3.publicsharev0alpha.CreatePublicShareRequest.prototype.getExpiration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.cs3.publicsharev0alpha.CreatePublicShareRequest.prototype.setExpiration = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.publicsharev0alpha.CreatePublicShareResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.publicsharev0alpha.CreatePublicShareResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cs3.publicsharev0alpha.CreatePublicShareResponse.displayName = 'proto.cs3.publicsharev0alpha.CreatePublicShareResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.publicsharev0alpha.CreatePublicShareResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.publicsharev0alpha.CreatePublicShareResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.publicsharev0alpha.CreatePublicShareResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicsharev0alpha.CreatePublicShareResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && cs3_rpc_status_pb.Status.toObject(includeInstance, f),
    publicShare: (f = msg.getPublicShare()) && cs3_publicshare_v0alpha_resources_pb.PublicShare.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.publicsharev0alpha.CreatePublicShareResponse}
 */
proto.cs3.publicsharev0alpha.CreatePublicShareResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.publicsharev0alpha.CreatePublicShareResponse;
  return proto.cs3.publicsharev0alpha.CreatePublicShareResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.publicsharev0alpha.CreatePublicShareResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.publicsharev0alpha.CreatePublicShareResponse}
 */
proto.cs3.publicsharev0alpha.CreatePublicShareResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_rpc_status_pb.Status;
      reader.readMessage(value,cs3_rpc_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new cs3_publicshare_v0alpha_resources_pb.PublicShare;
      reader.readMessage(value,cs3_publicshare_v0alpha_resources_pb.PublicShare.deserializeBinaryFromReader);
      msg.setPublicShare(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.publicsharev0alpha.CreatePublicShareResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.publicsharev0alpha.CreatePublicShareResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.publicsharev0alpha.CreatePublicShareResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicsharev0alpha.CreatePublicShareResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_rpc_status_pb.Status.serializeBinaryToWriter
    );
  }
  f = message.getPublicShare();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_publicshare_v0alpha_resources_pb.PublicShare.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.rpc.Status status = 1;
 * @return {?proto.cs3.rpc.Status}
 */
proto.cs3.publicsharev0alpha.CreatePublicShareResponse.prototype.getStatus = function() {
  return /** @type{?proto.cs3.rpc.Status} */ (
    jspb.Message.getWrapperField(this, cs3_rpc_status_pb.Status, 1));
};


/** @param {?proto.cs3.rpc.Status|undefined} value */
proto.cs3.publicsharev0alpha.CreatePublicShareResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.cs3.publicsharev0alpha.CreatePublicShareResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cs3.publicsharev0alpha.CreatePublicShareResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PublicShare public_share = 2;
 * @return {?proto.cs3.publicsharev0alpha.PublicShare}
 */
proto.cs3.publicsharev0alpha.CreatePublicShareResponse.prototype.getPublicShare = function() {
  return /** @type{?proto.cs3.publicsharev0alpha.PublicShare} */ (
    jspb.Message.getWrapperField(this, cs3_publicshare_v0alpha_resources_pb.PublicShare, 2));
};


/** @param {?proto.cs3.publicsharev0alpha.PublicShare|undefined} value */
proto.cs3.publicsharev0alpha.CreatePublicShareResponse.prototype.setPublicShare = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.cs3.publicsharev0alpha.CreatePublicShareResponse.prototype.clearPublicShare = function() {
  this.setPublicShare(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cs3.publicsharev0alpha.CreatePublicShareResponse.prototype.hasPublicShare = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.publicsharev0alpha.UpdatePublicShareRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.publicsharev0alpha.UpdatePublicShareRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cs3.publicsharev0alpha.UpdatePublicShareRequest.displayName = 'proto.cs3.publicsharev0alpha.UpdatePublicShareRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.publicsharev0alpha.UpdatePublicShareRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.publicsharev0alpha.UpdatePublicShareRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.publicsharev0alpha.UpdatePublicShareRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicsharev0alpha.UpdatePublicShareRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicShareId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    policy: (f = msg.getPolicy()) && cs3_publicshare_v0alpha_resources_pb.UpdatePolicy.toObject(includeInstance, f),
    password: jspb.Message.getFieldWithDefault(msg, 3, ""),
    expiration: jspb.Message.getFieldWithDefault(msg, 4, ""),
    permission: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.publicsharev0alpha.UpdatePublicShareRequest}
 */
proto.cs3.publicsharev0alpha.UpdatePublicShareRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.publicsharev0alpha.UpdatePublicShareRequest;
  return proto.cs3.publicsharev0alpha.UpdatePublicShareRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.publicsharev0alpha.UpdatePublicShareRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.publicsharev0alpha.UpdatePublicShareRequest}
 */
proto.cs3.publicsharev0alpha.UpdatePublicShareRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicShareId(value);
      break;
    case 2:
      var value = new cs3_publicshare_v0alpha_resources_pb.UpdatePolicy;
      reader.readMessage(value,cs3_publicshare_v0alpha_resources_pb.UpdatePolicy.deserializeBinaryFromReader);
      msg.setPolicy(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpiration(value);
      break;
    case 5:
      var value = /** @type {!proto.cs3.publicsharev0alpha.Permission} */ (reader.readEnum());
      msg.setPermission(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.publicsharev0alpha.UpdatePublicShareRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.publicsharev0alpha.UpdatePublicShareRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.publicsharev0alpha.UpdatePublicShareRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicsharev0alpha.UpdatePublicShareRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicShareId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPolicy();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_publicshare_v0alpha_resources_pb.UpdatePolicy.serializeBinaryToWriter
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getExpiration();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPermission();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional string public_share_id = 1;
 * @return {string}
 */
proto.cs3.publicsharev0alpha.UpdatePublicShareRequest.prototype.getPublicShareId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.cs3.publicsharev0alpha.UpdatePublicShareRequest.prototype.setPublicShareId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional UpdatePolicy policy = 2;
 * @return {?proto.cs3.publicsharev0alpha.UpdatePolicy}
 */
proto.cs3.publicsharev0alpha.UpdatePublicShareRequest.prototype.getPolicy = function() {
  return /** @type{?proto.cs3.publicsharev0alpha.UpdatePolicy} */ (
    jspb.Message.getWrapperField(this, cs3_publicshare_v0alpha_resources_pb.UpdatePolicy, 2));
};


/** @param {?proto.cs3.publicsharev0alpha.UpdatePolicy|undefined} value */
proto.cs3.publicsharev0alpha.UpdatePublicShareRequest.prototype.setPolicy = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.cs3.publicsharev0alpha.UpdatePublicShareRequest.prototype.clearPolicy = function() {
  this.setPolicy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cs3.publicsharev0alpha.UpdatePublicShareRequest.prototype.hasPolicy = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string password = 3;
 * @return {string}
 */
proto.cs3.publicsharev0alpha.UpdatePublicShareRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.cs3.publicsharev0alpha.UpdatePublicShareRequest.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string expiration = 4;
 * @return {string}
 */
proto.cs3.publicsharev0alpha.UpdatePublicShareRequest.prototype.getExpiration = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.cs3.publicsharev0alpha.UpdatePublicShareRequest.prototype.setExpiration = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Permission permission = 5;
 * @return {!proto.cs3.publicsharev0alpha.Permission}
 */
proto.cs3.publicsharev0alpha.UpdatePublicShareRequest.prototype.getPermission = function() {
  return /** @type {!proto.cs3.publicsharev0alpha.Permission} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.cs3.publicsharev0alpha.Permission} value */
proto.cs3.publicsharev0alpha.UpdatePublicShareRequest.prototype.setPermission = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.publicsharev0alpha.UpdatePublicShareResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.publicsharev0alpha.UpdatePublicShareResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cs3.publicsharev0alpha.UpdatePublicShareResponse.displayName = 'proto.cs3.publicsharev0alpha.UpdatePublicShareResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.publicsharev0alpha.UpdatePublicShareResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.publicsharev0alpha.UpdatePublicShareResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.publicsharev0alpha.UpdatePublicShareResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicsharev0alpha.UpdatePublicShareResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && cs3_rpc_status_pb.Status.toObject(includeInstance, f),
    publicShare: (f = msg.getPublicShare()) && cs3_publicshare_v0alpha_resources_pb.PublicShare.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.publicsharev0alpha.UpdatePublicShareResponse}
 */
proto.cs3.publicsharev0alpha.UpdatePublicShareResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.publicsharev0alpha.UpdatePublicShareResponse;
  return proto.cs3.publicsharev0alpha.UpdatePublicShareResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.publicsharev0alpha.UpdatePublicShareResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.publicsharev0alpha.UpdatePublicShareResponse}
 */
proto.cs3.publicsharev0alpha.UpdatePublicShareResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_rpc_status_pb.Status;
      reader.readMessage(value,cs3_rpc_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new cs3_publicshare_v0alpha_resources_pb.PublicShare;
      reader.readMessage(value,cs3_publicshare_v0alpha_resources_pb.PublicShare.deserializeBinaryFromReader);
      msg.setPublicShare(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.publicsharev0alpha.UpdatePublicShareResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.publicsharev0alpha.UpdatePublicShareResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.publicsharev0alpha.UpdatePublicShareResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicsharev0alpha.UpdatePublicShareResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_rpc_status_pb.Status.serializeBinaryToWriter
    );
  }
  f = message.getPublicShare();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_publicshare_v0alpha_resources_pb.PublicShare.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.rpc.Status status = 1;
 * @return {?proto.cs3.rpc.Status}
 */
proto.cs3.publicsharev0alpha.UpdatePublicShareResponse.prototype.getStatus = function() {
  return /** @type{?proto.cs3.rpc.Status} */ (
    jspb.Message.getWrapperField(this, cs3_rpc_status_pb.Status, 1));
};


/** @param {?proto.cs3.rpc.Status|undefined} value */
proto.cs3.publicsharev0alpha.UpdatePublicShareResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.cs3.publicsharev0alpha.UpdatePublicShareResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cs3.publicsharev0alpha.UpdatePublicShareResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PublicShare public_share = 2;
 * @return {?proto.cs3.publicsharev0alpha.PublicShare}
 */
proto.cs3.publicsharev0alpha.UpdatePublicShareResponse.prototype.getPublicShare = function() {
  return /** @type{?proto.cs3.publicsharev0alpha.PublicShare} */ (
    jspb.Message.getWrapperField(this, cs3_publicshare_v0alpha_resources_pb.PublicShare, 2));
};


/** @param {?proto.cs3.publicsharev0alpha.PublicShare|undefined} value */
proto.cs3.publicsharev0alpha.UpdatePublicShareResponse.prototype.setPublicShare = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.cs3.publicsharev0alpha.UpdatePublicShareResponse.prototype.clearPublicShare = function() {
  this.setPublicShare(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cs3.publicsharev0alpha.UpdatePublicShareResponse.prototype.hasPublicShare = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.publicsharev0alpha.ListPublicSharesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.publicsharev0alpha.ListPublicSharesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cs3.publicsharev0alpha.ListPublicSharesRequest.displayName = 'proto.cs3.publicsharev0alpha.ListPublicSharesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.publicsharev0alpha.ListPublicSharesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.publicsharev0alpha.ListPublicSharesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.publicsharev0alpha.ListPublicSharesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicsharev0alpha.ListPublicSharesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    filename: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.publicsharev0alpha.ListPublicSharesRequest}
 */
proto.cs3.publicsharev0alpha.ListPublicSharesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.publicsharev0alpha.ListPublicSharesRequest;
  return proto.cs3.publicsharev0alpha.ListPublicSharesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.publicsharev0alpha.ListPublicSharesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.publicsharev0alpha.ListPublicSharesRequest}
 */
proto.cs3.publicsharev0alpha.ListPublicSharesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.publicsharev0alpha.ListPublicSharesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.publicsharev0alpha.ListPublicSharesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.publicsharev0alpha.ListPublicSharesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicsharev0alpha.ListPublicSharesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string filename = 1;
 * @return {string}
 */
proto.cs3.publicsharev0alpha.ListPublicSharesRequest.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.cs3.publicsharev0alpha.ListPublicSharesRequest.prototype.setFilename = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.publicsharev0alpha.ListPublicSharesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.publicsharev0alpha.ListPublicSharesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cs3.publicsharev0alpha.ListPublicSharesResponse.displayName = 'proto.cs3.publicsharev0alpha.ListPublicSharesResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.publicsharev0alpha.ListPublicSharesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.publicsharev0alpha.ListPublicSharesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.publicsharev0alpha.ListPublicSharesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicsharev0alpha.ListPublicSharesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && cs3_rpc_status_pb.Status.toObject(includeInstance, f),
    publicShare: (f = msg.getPublicShare()) && cs3_publicshare_v0alpha_resources_pb.PublicShare.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.publicsharev0alpha.ListPublicSharesResponse}
 */
proto.cs3.publicsharev0alpha.ListPublicSharesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.publicsharev0alpha.ListPublicSharesResponse;
  return proto.cs3.publicsharev0alpha.ListPublicSharesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.publicsharev0alpha.ListPublicSharesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.publicsharev0alpha.ListPublicSharesResponse}
 */
proto.cs3.publicsharev0alpha.ListPublicSharesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_rpc_status_pb.Status;
      reader.readMessage(value,cs3_rpc_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new cs3_publicshare_v0alpha_resources_pb.PublicShare;
      reader.readMessage(value,cs3_publicshare_v0alpha_resources_pb.PublicShare.deserializeBinaryFromReader);
      msg.setPublicShare(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.publicsharev0alpha.ListPublicSharesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.publicsharev0alpha.ListPublicSharesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.publicsharev0alpha.ListPublicSharesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicsharev0alpha.ListPublicSharesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_rpc_status_pb.Status.serializeBinaryToWriter
    );
  }
  f = message.getPublicShare();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_publicshare_v0alpha_resources_pb.PublicShare.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.rpc.Status status = 1;
 * @return {?proto.cs3.rpc.Status}
 */
proto.cs3.publicsharev0alpha.ListPublicSharesResponse.prototype.getStatus = function() {
  return /** @type{?proto.cs3.rpc.Status} */ (
    jspb.Message.getWrapperField(this, cs3_rpc_status_pb.Status, 1));
};


/** @param {?proto.cs3.rpc.Status|undefined} value */
proto.cs3.publicsharev0alpha.ListPublicSharesResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.cs3.publicsharev0alpha.ListPublicSharesResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cs3.publicsharev0alpha.ListPublicSharesResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PublicShare public_share = 2;
 * @return {?proto.cs3.publicsharev0alpha.PublicShare}
 */
proto.cs3.publicsharev0alpha.ListPublicSharesResponse.prototype.getPublicShare = function() {
  return /** @type{?proto.cs3.publicsharev0alpha.PublicShare} */ (
    jspb.Message.getWrapperField(this, cs3_publicshare_v0alpha_resources_pb.PublicShare, 2));
};


/** @param {?proto.cs3.publicsharev0alpha.PublicShare|undefined} value */
proto.cs3.publicsharev0alpha.ListPublicSharesResponse.prototype.setPublicShare = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.cs3.publicsharev0alpha.ListPublicSharesResponse.prototype.clearPublicShare = function() {
  this.setPublicShare(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cs3.publicsharev0alpha.ListPublicSharesResponse.prototype.hasPublicShare = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.publicsharev0alpha.RevokePublicShareRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.publicsharev0alpha.RevokePublicShareRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cs3.publicsharev0alpha.RevokePublicShareRequest.displayName = 'proto.cs3.publicsharev0alpha.RevokePublicShareRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.publicsharev0alpha.RevokePublicShareRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.publicsharev0alpha.RevokePublicShareRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.publicsharev0alpha.RevokePublicShareRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicsharev0alpha.RevokePublicShareRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicShareId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.publicsharev0alpha.RevokePublicShareRequest}
 */
proto.cs3.publicsharev0alpha.RevokePublicShareRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.publicsharev0alpha.RevokePublicShareRequest;
  return proto.cs3.publicsharev0alpha.RevokePublicShareRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.publicsharev0alpha.RevokePublicShareRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.publicsharev0alpha.RevokePublicShareRequest}
 */
proto.cs3.publicsharev0alpha.RevokePublicShareRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicShareId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.publicsharev0alpha.RevokePublicShareRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.publicsharev0alpha.RevokePublicShareRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.publicsharev0alpha.RevokePublicShareRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicsharev0alpha.RevokePublicShareRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicShareId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string public_share_id = 1;
 * @return {string}
 */
proto.cs3.publicsharev0alpha.RevokePublicShareRequest.prototype.getPublicShareId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.cs3.publicsharev0alpha.RevokePublicShareRequest.prototype.setPublicShareId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.publicsharev0alpha.RevokePublicShareResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.publicsharev0alpha.RevokePublicShareResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cs3.publicsharev0alpha.RevokePublicShareResponse.displayName = 'proto.cs3.publicsharev0alpha.RevokePublicShareResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.publicsharev0alpha.RevokePublicShareResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.publicsharev0alpha.RevokePublicShareResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.publicsharev0alpha.RevokePublicShareResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicsharev0alpha.RevokePublicShareResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && cs3_rpc_status_pb.Status.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.publicsharev0alpha.RevokePublicShareResponse}
 */
proto.cs3.publicsharev0alpha.RevokePublicShareResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.publicsharev0alpha.RevokePublicShareResponse;
  return proto.cs3.publicsharev0alpha.RevokePublicShareResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.publicsharev0alpha.RevokePublicShareResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.publicsharev0alpha.RevokePublicShareResponse}
 */
proto.cs3.publicsharev0alpha.RevokePublicShareResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_rpc_status_pb.Status;
      reader.readMessage(value,cs3_rpc_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.publicsharev0alpha.RevokePublicShareResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.publicsharev0alpha.RevokePublicShareResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.publicsharev0alpha.RevokePublicShareResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicsharev0alpha.RevokePublicShareResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_rpc_status_pb.Status.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.rpc.Status status = 1;
 * @return {?proto.cs3.rpc.Status}
 */
proto.cs3.publicsharev0alpha.RevokePublicShareResponse.prototype.getStatus = function() {
  return /** @type{?proto.cs3.rpc.Status} */ (
    jspb.Message.getWrapperField(this, cs3_rpc_status_pb.Status, 1));
};


/** @param {?proto.cs3.rpc.Status|undefined} value */
proto.cs3.publicsharev0alpha.RevokePublicShareResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.cs3.publicsharev0alpha.RevokePublicShareResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cs3.publicsharev0alpha.RevokePublicShareResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.publicsharev0alpha.GetPublicShareRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.publicsharev0alpha.GetPublicShareRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cs3.publicsharev0alpha.GetPublicShareRequest.displayName = 'proto.cs3.publicsharev0alpha.GetPublicShareRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.publicsharev0alpha.GetPublicShareRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.publicsharev0alpha.GetPublicShareRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.publicsharev0alpha.GetPublicShareRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicsharev0alpha.GetPublicShareRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicShareId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.publicsharev0alpha.GetPublicShareRequest}
 */
proto.cs3.publicsharev0alpha.GetPublicShareRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.publicsharev0alpha.GetPublicShareRequest;
  return proto.cs3.publicsharev0alpha.GetPublicShareRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.publicsharev0alpha.GetPublicShareRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.publicsharev0alpha.GetPublicShareRequest}
 */
proto.cs3.publicsharev0alpha.GetPublicShareRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicShareId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.publicsharev0alpha.GetPublicShareRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.publicsharev0alpha.GetPublicShareRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.publicsharev0alpha.GetPublicShareRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicsharev0alpha.GetPublicShareRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicShareId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string public_share_id = 1;
 * @return {string}
 */
proto.cs3.publicsharev0alpha.GetPublicShareRequest.prototype.getPublicShareId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.cs3.publicsharev0alpha.GetPublicShareRequest.prototype.setPublicShareId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.publicsharev0alpha.GetPublicShareResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.publicsharev0alpha.GetPublicShareResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cs3.publicsharev0alpha.GetPublicShareResponse.displayName = 'proto.cs3.publicsharev0alpha.GetPublicShareResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.publicsharev0alpha.GetPublicShareResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.publicsharev0alpha.GetPublicShareResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.publicsharev0alpha.GetPublicShareResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicsharev0alpha.GetPublicShareResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && cs3_rpc_status_pb.Status.toObject(includeInstance, f),
    publicShare: (f = msg.getPublicShare()) && cs3_publicshare_v0alpha_resources_pb.PublicShare.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.publicsharev0alpha.GetPublicShareResponse}
 */
proto.cs3.publicsharev0alpha.GetPublicShareResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.publicsharev0alpha.GetPublicShareResponse;
  return proto.cs3.publicsharev0alpha.GetPublicShareResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.publicsharev0alpha.GetPublicShareResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.publicsharev0alpha.GetPublicShareResponse}
 */
proto.cs3.publicsharev0alpha.GetPublicShareResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_rpc_status_pb.Status;
      reader.readMessage(value,cs3_rpc_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new cs3_publicshare_v0alpha_resources_pb.PublicShare;
      reader.readMessage(value,cs3_publicshare_v0alpha_resources_pb.PublicShare.deserializeBinaryFromReader);
      msg.setPublicShare(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.publicsharev0alpha.GetPublicShareResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.publicsharev0alpha.GetPublicShareResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.publicsharev0alpha.GetPublicShareResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicsharev0alpha.GetPublicShareResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_rpc_status_pb.Status.serializeBinaryToWriter
    );
  }
  f = message.getPublicShare();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_publicshare_v0alpha_resources_pb.PublicShare.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.rpc.Status status = 1;
 * @return {?proto.cs3.rpc.Status}
 */
proto.cs3.publicsharev0alpha.GetPublicShareResponse.prototype.getStatus = function() {
  return /** @type{?proto.cs3.rpc.Status} */ (
    jspb.Message.getWrapperField(this, cs3_rpc_status_pb.Status, 1));
};


/** @param {?proto.cs3.rpc.Status|undefined} value */
proto.cs3.publicsharev0alpha.GetPublicShareResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.cs3.publicsharev0alpha.GetPublicShareResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cs3.publicsharev0alpha.GetPublicShareResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PublicShare public_share = 2;
 * @return {?proto.cs3.publicsharev0alpha.PublicShare}
 */
proto.cs3.publicsharev0alpha.GetPublicShareResponse.prototype.getPublicShare = function() {
  return /** @type{?proto.cs3.publicsharev0alpha.PublicShare} */ (
    jspb.Message.getWrapperField(this, cs3_publicshare_v0alpha_resources_pb.PublicShare, 2));
};


/** @param {?proto.cs3.publicsharev0alpha.PublicShare|undefined} value */
proto.cs3.publicsharev0alpha.GetPublicShareResponse.prototype.setPublicShare = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.cs3.publicsharev0alpha.GetPublicShareResponse.prototype.clearPublicShare = function() {
  this.setPublicShare(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cs3.publicsharev0alpha.GetPublicShareResponse.prototype.hasPublicShare = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.publicsharev0alpha.GetPublicShareByTokenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.publicsharev0alpha.GetPublicShareByTokenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cs3.publicsharev0alpha.GetPublicShareByTokenRequest.displayName = 'proto.cs3.publicsharev0alpha.GetPublicShareByTokenRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.publicsharev0alpha.GetPublicShareByTokenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.publicsharev0alpha.GetPublicShareByTokenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.publicsharev0alpha.GetPublicShareByTokenRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicsharev0alpha.GetPublicShareByTokenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.publicsharev0alpha.GetPublicShareByTokenRequest}
 */
proto.cs3.publicsharev0alpha.GetPublicShareByTokenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.publicsharev0alpha.GetPublicShareByTokenRequest;
  return proto.cs3.publicsharev0alpha.GetPublicShareByTokenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.publicsharev0alpha.GetPublicShareByTokenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.publicsharev0alpha.GetPublicShareByTokenRequest}
 */
proto.cs3.publicsharev0alpha.GetPublicShareByTokenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.publicsharev0alpha.GetPublicShareByTokenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.publicsharev0alpha.GetPublicShareByTokenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.publicsharev0alpha.GetPublicShareByTokenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicsharev0alpha.GetPublicShareByTokenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.cs3.publicsharev0alpha.GetPublicShareByTokenRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.cs3.publicsharev0alpha.GetPublicShareByTokenRequest.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.publicsharev0alpha.GetPublicShareByTokenResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.publicsharev0alpha.GetPublicShareByTokenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cs3.publicsharev0alpha.GetPublicShareByTokenResponse.displayName = 'proto.cs3.publicsharev0alpha.GetPublicShareByTokenResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.publicsharev0alpha.GetPublicShareByTokenResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.publicsharev0alpha.GetPublicShareByTokenResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.publicsharev0alpha.GetPublicShareByTokenResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicsharev0alpha.GetPublicShareByTokenResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && cs3_rpc_status_pb.Status.toObject(includeInstance, f),
    publicShare: (f = msg.getPublicShare()) && cs3_publicshare_v0alpha_resources_pb.PublicShare.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.publicsharev0alpha.GetPublicShareByTokenResponse}
 */
proto.cs3.publicsharev0alpha.GetPublicShareByTokenResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.publicsharev0alpha.GetPublicShareByTokenResponse;
  return proto.cs3.publicsharev0alpha.GetPublicShareByTokenResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.publicsharev0alpha.GetPublicShareByTokenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.publicsharev0alpha.GetPublicShareByTokenResponse}
 */
proto.cs3.publicsharev0alpha.GetPublicShareByTokenResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_rpc_status_pb.Status;
      reader.readMessage(value,cs3_rpc_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new cs3_publicshare_v0alpha_resources_pb.PublicShare;
      reader.readMessage(value,cs3_publicshare_v0alpha_resources_pb.PublicShare.deserializeBinaryFromReader);
      msg.setPublicShare(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.publicsharev0alpha.GetPublicShareByTokenResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.publicsharev0alpha.GetPublicShareByTokenResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.publicsharev0alpha.GetPublicShareByTokenResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicsharev0alpha.GetPublicShareByTokenResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_rpc_status_pb.Status.serializeBinaryToWriter
    );
  }
  f = message.getPublicShare();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_publicshare_v0alpha_resources_pb.PublicShare.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.rpc.Status status = 1;
 * @return {?proto.cs3.rpc.Status}
 */
proto.cs3.publicsharev0alpha.GetPublicShareByTokenResponse.prototype.getStatus = function() {
  return /** @type{?proto.cs3.rpc.Status} */ (
    jspb.Message.getWrapperField(this, cs3_rpc_status_pb.Status, 1));
};


/** @param {?proto.cs3.rpc.Status|undefined} value */
proto.cs3.publicsharev0alpha.GetPublicShareByTokenResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.cs3.publicsharev0alpha.GetPublicShareByTokenResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cs3.publicsharev0alpha.GetPublicShareByTokenResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PublicShare public_share = 2;
 * @return {?proto.cs3.publicsharev0alpha.PublicShare}
 */
proto.cs3.publicsharev0alpha.GetPublicShareByTokenResponse.prototype.getPublicShare = function() {
  return /** @type{?proto.cs3.publicsharev0alpha.PublicShare} */ (
    jspb.Message.getWrapperField(this, cs3_publicshare_v0alpha_resources_pb.PublicShare, 2));
};


/** @param {?proto.cs3.publicsharev0alpha.PublicShare|undefined} value */
proto.cs3.publicsharev0alpha.GetPublicShareByTokenResponse.prototype.setPublicShare = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.cs3.publicsharev0alpha.GetPublicShareByTokenResponse.prototype.clearPublicShare = function() {
  this.setPublicShare(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cs3.publicsharev0alpha.GetPublicShareByTokenResponse.prototype.hasPublicShare = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.cs3.publicsharev0alpha);
