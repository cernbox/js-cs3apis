/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.cs3.sharev0alpha.Permissions', null, global);
goog.exportSymbol('proto.cs3.sharev0alpha.ReceivedShare', null, global);
goog.exportSymbol('proto.cs3.sharev0alpha.ReceivedShareState', null, global);
goog.exportSymbol('proto.cs3.sharev0alpha.Share', null, global);
goog.exportSymbol('proto.cs3.sharev0alpha.TargetType', null, global);
goog.exportSymbol('proto.cs3.sharev0alpha.UpdatePolicy', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.sharev0alpha.Permissions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.sharev0alpha.Permissions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cs3.sharev0alpha.Permissions.displayName = 'proto.cs3.sharev0alpha.Permissions';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.sharev0alpha.Permissions.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.sharev0alpha.Permissions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.sharev0alpha.Permissions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharev0alpha.Permissions.toObject = function(includeInstance, msg) {
  var f, obj = {
    read: jspb.Message.getFieldWithDefault(msg, 1, false),
    modify: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.sharev0alpha.Permissions}
 */
proto.cs3.sharev0alpha.Permissions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.sharev0alpha.Permissions;
  return proto.cs3.sharev0alpha.Permissions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.sharev0alpha.Permissions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.sharev0alpha.Permissions}
 */
proto.cs3.sharev0alpha.Permissions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRead(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setModify(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.sharev0alpha.Permissions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.sharev0alpha.Permissions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.sharev0alpha.Permissions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharev0alpha.Permissions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRead();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getModify();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool read = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.cs3.sharev0alpha.Permissions.prototype.getRead = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.cs3.sharev0alpha.Permissions.prototype.setRead = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool modify = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.cs3.sharev0alpha.Permissions.prototype.getModify = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.cs3.sharev0alpha.Permissions.prototype.setModify = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.sharev0alpha.Share = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.sharev0alpha.Share, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cs3.sharev0alpha.Share.displayName = 'proto.cs3.sharev0alpha.Share';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.sharev0alpha.Share.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.sharev0alpha.Share.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.sharev0alpha.Share} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharev0alpha.Share.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    filename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    target: jspb.Message.getFieldWithDefault(msg, 3, ""),
    targetType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    permissions: (f = msg.getPermissions()) && proto.cs3.sharev0alpha.Permissions.toObject(includeInstance, f),
    ctime: jspb.Message.getFieldWithDefault(msg, 6, 0),
    mtime: jspb.Message.getFieldWithDefault(msg, 7, 0),
    displayName: jspb.Message.getFieldWithDefault(msg, 8, ""),
    owner: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.sharev0alpha.Share}
 */
proto.cs3.sharev0alpha.Share.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.sharev0alpha.Share;
  return proto.cs3.sharev0alpha.Share.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.sharev0alpha.Share} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.sharev0alpha.Share}
 */
proto.cs3.sharev0alpha.Share.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTarget(value);
      break;
    case 4:
      var value = /** @type {!proto.cs3.sharev0alpha.TargetType} */ (reader.readEnum());
      msg.setTargetType(value);
      break;
    case 5:
      var value = new proto.cs3.sharev0alpha.Permissions;
      reader.readMessage(value,proto.cs3.sharev0alpha.Permissions.deserializeBinaryFromReader);
      msg.setPermissions(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCtime(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMtime(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.sharev0alpha.Share.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.sharev0alpha.Share.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.sharev0alpha.Share} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharev0alpha.Share.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTarget();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTargetType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getPermissions();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.cs3.sharev0alpha.Permissions.serializeBinaryToWriter
    );
  }
  f = message.getCtime();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getMtime();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getDisplayName();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.cs3.sharev0alpha.Share.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.cs3.sharev0alpha.Share.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string filename = 2;
 * @return {string}
 */
proto.cs3.sharev0alpha.Share.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.cs3.sharev0alpha.Share.prototype.setFilename = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string target = 3;
 * @return {string}
 */
proto.cs3.sharev0alpha.Share.prototype.getTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.cs3.sharev0alpha.Share.prototype.setTarget = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional TargetType target_type = 4;
 * @return {!proto.cs3.sharev0alpha.TargetType}
 */
proto.cs3.sharev0alpha.Share.prototype.getTargetType = function() {
  return /** @type {!proto.cs3.sharev0alpha.TargetType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.cs3.sharev0alpha.TargetType} value */
proto.cs3.sharev0alpha.Share.prototype.setTargetType = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional Permissions permissions = 5;
 * @return {?proto.cs3.sharev0alpha.Permissions}
 */
proto.cs3.sharev0alpha.Share.prototype.getPermissions = function() {
  return /** @type{?proto.cs3.sharev0alpha.Permissions} */ (
    jspb.Message.getWrapperField(this, proto.cs3.sharev0alpha.Permissions, 5));
};


/** @param {?proto.cs3.sharev0alpha.Permissions|undefined} value */
proto.cs3.sharev0alpha.Share.prototype.setPermissions = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.cs3.sharev0alpha.Share.prototype.clearPermissions = function() {
  this.setPermissions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cs3.sharev0alpha.Share.prototype.hasPermissions = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint64 ctime = 6;
 * @return {number}
 */
proto.cs3.sharev0alpha.Share.prototype.getCtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.cs3.sharev0alpha.Share.prototype.setCtime = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 mtime = 7;
 * @return {number}
 */
proto.cs3.sharev0alpha.Share.prototype.getMtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.cs3.sharev0alpha.Share.prototype.setMtime = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string display_name = 8;
 * @return {string}
 */
proto.cs3.sharev0alpha.Share.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.cs3.sharev0alpha.Share.prototype.setDisplayName = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string owner = 9;
 * @return {string}
 */
proto.cs3.sharev0alpha.Share.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.cs3.sharev0alpha.Share.prototype.setOwner = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.sharev0alpha.UpdatePolicy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.sharev0alpha.UpdatePolicy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cs3.sharev0alpha.UpdatePolicy.displayName = 'proto.cs3.sharev0alpha.UpdatePolicy';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.sharev0alpha.UpdatePolicy.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.sharev0alpha.UpdatePolicy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.sharev0alpha.UpdatePolicy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharev0alpha.UpdatePolicy.toObject = function(includeInstance, msg) {
  var f, obj = {
    updatePermissions: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.sharev0alpha.UpdatePolicy}
 */
proto.cs3.sharev0alpha.UpdatePolicy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.sharev0alpha.UpdatePolicy;
  return proto.cs3.sharev0alpha.UpdatePolicy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.sharev0alpha.UpdatePolicy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.sharev0alpha.UpdatePolicy}
 */
proto.cs3.sharev0alpha.UpdatePolicy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUpdatePermissions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.sharev0alpha.UpdatePolicy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.sharev0alpha.UpdatePolicy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.sharev0alpha.UpdatePolicy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharev0alpha.UpdatePolicy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdatePermissions();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool update_permissions = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.cs3.sharev0alpha.UpdatePolicy.prototype.getUpdatePermissions = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.cs3.sharev0alpha.UpdatePolicy.prototype.setUpdatePermissions = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.sharev0alpha.ReceivedShare = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.sharev0alpha.ReceivedShare, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cs3.sharev0alpha.ReceivedShare.displayName = 'proto.cs3.sharev0alpha.ReceivedShare';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.sharev0alpha.ReceivedShare.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.sharev0alpha.ReceivedShare.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.sharev0alpha.ReceivedShare} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharev0alpha.ReceivedShare.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    filename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    target: jspb.Message.getFieldWithDefault(msg, 3, ""),
    targetType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    permissions: (f = msg.getPermissions()) && proto.cs3.sharev0alpha.Permissions.toObject(includeInstance, f),
    ctime: jspb.Message.getFieldWithDefault(msg, 6, 0),
    mtime: jspb.Message.getFieldWithDefault(msg, 7, 0),
    displayName: jspb.Message.getFieldWithDefault(msg, 8, ""),
    owner: jspb.Message.getFieldWithDefault(msg, 9, ""),
    state: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.sharev0alpha.ReceivedShare}
 */
proto.cs3.sharev0alpha.ReceivedShare.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.sharev0alpha.ReceivedShare;
  return proto.cs3.sharev0alpha.ReceivedShare.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.sharev0alpha.ReceivedShare} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.sharev0alpha.ReceivedShare}
 */
proto.cs3.sharev0alpha.ReceivedShare.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTarget(value);
      break;
    case 4:
      var value = /** @type {!proto.cs3.sharev0alpha.TargetType} */ (reader.readEnum());
      msg.setTargetType(value);
      break;
    case 5:
      var value = new proto.cs3.sharev0alpha.Permissions;
      reader.readMessage(value,proto.cs3.sharev0alpha.Permissions.deserializeBinaryFromReader);
      msg.setPermissions(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCtime(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMtime(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 10:
      var value = /** @type {!proto.cs3.sharev0alpha.ReceivedShareState} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.sharev0alpha.ReceivedShare.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.sharev0alpha.ReceivedShare.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.sharev0alpha.ReceivedShare} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharev0alpha.ReceivedShare.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTarget();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTargetType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getPermissions();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.cs3.sharev0alpha.Permissions.serializeBinaryToWriter
    );
  }
  f = message.getCtime();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getMtime();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getDisplayName();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.cs3.sharev0alpha.ReceivedShare.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.cs3.sharev0alpha.ReceivedShare.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string filename = 2;
 * @return {string}
 */
proto.cs3.sharev0alpha.ReceivedShare.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.cs3.sharev0alpha.ReceivedShare.prototype.setFilename = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string target = 3;
 * @return {string}
 */
proto.cs3.sharev0alpha.ReceivedShare.prototype.getTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.cs3.sharev0alpha.ReceivedShare.prototype.setTarget = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional TargetType target_type = 4;
 * @return {!proto.cs3.sharev0alpha.TargetType}
 */
proto.cs3.sharev0alpha.ReceivedShare.prototype.getTargetType = function() {
  return /** @type {!proto.cs3.sharev0alpha.TargetType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.cs3.sharev0alpha.TargetType} value */
proto.cs3.sharev0alpha.ReceivedShare.prototype.setTargetType = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional Permissions permissions = 5;
 * @return {?proto.cs3.sharev0alpha.Permissions}
 */
proto.cs3.sharev0alpha.ReceivedShare.prototype.getPermissions = function() {
  return /** @type{?proto.cs3.sharev0alpha.Permissions} */ (
    jspb.Message.getWrapperField(this, proto.cs3.sharev0alpha.Permissions, 5));
};


/** @param {?proto.cs3.sharev0alpha.Permissions|undefined} value */
proto.cs3.sharev0alpha.ReceivedShare.prototype.setPermissions = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.cs3.sharev0alpha.ReceivedShare.prototype.clearPermissions = function() {
  this.setPermissions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cs3.sharev0alpha.ReceivedShare.prototype.hasPermissions = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint64 ctime = 6;
 * @return {number}
 */
proto.cs3.sharev0alpha.ReceivedShare.prototype.getCtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.cs3.sharev0alpha.ReceivedShare.prototype.setCtime = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 mtime = 7;
 * @return {number}
 */
proto.cs3.sharev0alpha.ReceivedShare.prototype.getMtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.cs3.sharev0alpha.ReceivedShare.prototype.setMtime = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string display_name = 8;
 * @return {string}
 */
proto.cs3.sharev0alpha.ReceivedShare.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.cs3.sharev0alpha.ReceivedShare.prototype.setDisplayName = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string owner = 9;
 * @return {string}
 */
proto.cs3.sharev0alpha.ReceivedShare.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.cs3.sharev0alpha.ReceivedShare.prototype.setOwner = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional ReceivedShareState state = 10;
 * @return {!proto.cs3.sharev0alpha.ReceivedShareState}
 */
proto.cs3.sharev0alpha.ReceivedShare.prototype.getState = function() {
  return /** @type {!proto.cs3.sharev0alpha.ReceivedShareState} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {!proto.cs3.sharev0alpha.ReceivedShareState} value */
proto.cs3.sharev0alpha.ReceivedShare.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * @enum {number}
 */
proto.cs3.sharev0alpha.TargetType = {
  TARGET_TYPE_INVALID: 0,
  TARGET_TYPE_USER: 1,
  TARGET_TYPE_GROUP: 2
};

/**
 * @enum {number}
 */
proto.cs3.sharev0alpha.ReceivedShareState = {
  RECEIVED_SHARE_STATE_INVALID: 0,
  RECEIVED_SHARE_STATE_ACCEPTED: 1,
  RECEIVED_SHARE_STATE_REJECTED: 2,
  RECEIVED_SHARE_STATE_PENDING: 3
};

goog.object.extend(exports, proto.cs3.sharev0alpha);
