/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.cs3.storageproviderv0alpha.ACL', null, global);
goog.exportSymbol('proto.cs3.storageproviderv0alpha.ACLMode', null, global);
goog.exportSymbol('proto.cs3.storageproviderv0alpha.ACLType', null, global);
goog.exportSymbol('proto.cs3.storageproviderv0alpha.DataChunk', null, global);
goog.exportSymbol('proto.cs3.storageproviderv0alpha.Metadata', null, global);
goog.exportSymbol('proto.cs3.storageproviderv0alpha.Permissions', null, global);
goog.exportSymbol('proto.cs3.storageproviderv0alpha.RecycleItem', null, global);
goog.exportSymbol('proto.cs3.storageproviderv0alpha.Version', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.storageproviderv0alpha.ACL = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.storageproviderv0alpha.ACL, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cs3.storageproviderv0alpha.ACL.displayName = 'proto.cs3.storageproviderv0alpha.ACL';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.storageproviderv0alpha.ACL.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.storageproviderv0alpha.ACL.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.storageproviderv0alpha.ACL} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.storageproviderv0alpha.ACL.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    mode: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.storageproviderv0alpha.ACL}
 */
proto.cs3.storageproviderv0alpha.ACL.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.storageproviderv0alpha.ACL;
  return proto.cs3.storageproviderv0alpha.ACL.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.storageproviderv0alpha.ACL} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.storageproviderv0alpha.ACL}
 */
proto.cs3.storageproviderv0alpha.ACL.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTarget(value);
      break;
    case 2:
      var value = /** @type {!proto.cs3.storageproviderv0alpha.ACLType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {!proto.cs3.storageproviderv0alpha.ACLMode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.storageproviderv0alpha.ACL.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.storageproviderv0alpha.ACL.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.storageproviderv0alpha.ACL} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.storageproviderv0alpha.ACL.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string target = 1;
 * @return {string}
 */
proto.cs3.storageproviderv0alpha.ACL.prototype.getTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.cs3.storageproviderv0alpha.ACL.prototype.setTarget = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ACLType type = 2;
 * @return {!proto.cs3.storageproviderv0alpha.ACLType}
 */
proto.cs3.storageproviderv0alpha.ACL.prototype.getType = function() {
  return /** @type {!proto.cs3.storageproviderv0alpha.ACLType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.cs3.storageproviderv0alpha.ACLType} value */
proto.cs3.storageproviderv0alpha.ACL.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional ACLMode mode = 3;
 * @return {!proto.cs3.storageproviderv0alpha.ACLMode}
 */
proto.cs3.storageproviderv0alpha.ACL.prototype.getMode = function() {
  return /** @type {!proto.cs3.storageproviderv0alpha.ACLMode} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.cs3.storageproviderv0alpha.ACLMode} value */
proto.cs3.storageproviderv0alpha.ACL.prototype.setMode = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.storageproviderv0alpha.Metadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.storageproviderv0alpha.Metadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cs3.storageproviderv0alpha.Metadata.displayName = 'proto.cs3.storageproviderv0alpha.Metadata';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.storageproviderv0alpha.Metadata.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.storageproviderv0alpha.Metadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.storageproviderv0alpha.Metadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.storageproviderv0alpha.Metadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    filename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    size: jspb.Message.getFieldWithDefault(msg, 3, 0),
    mtime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    isDir: jspb.Message.getFieldWithDefault(msg, 5, false),
    etag: jspb.Message.getFieldWithDefault(msg, 6, ""),
    checksum: jspb.Message.getFieldWithDefault(msg, 7, ""),
    permissions: (f = msg.getPermissions()) && proto.cs3.storageproviderv0alpha.Permissions.toObject(includeInstance, f),
    mime: jspb.Message.getFieldWithDefault(msg, 9, ""),
    sys: msg.getSys_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.storageproviderv0alpha.Metadata}
 */
proto.cs3.storageproviderv0alpha.Metadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.storageproviderv0alpha.Metadata;
  return proto.cs3.storageproviderv0alpha.Metadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.storageproviderv0alpha.Metadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.storageproviderv0alpha.Metadata}
 */
proto.cs3.storageproviderv0alpha.Metadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMtime(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDir(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setEtag(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setChecksum(value);
      break;
    case 8:
      var value = new proto.cs3.storageproviderv0alpha.Permissions;
      reader.readMessage(value,proto.cs3.storageproviderv0alpha.Permissions.deserializeBinaryFromReader);
      msg.setPermissions(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMime(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.storageproviderv0alpha.Metadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.storageproviderv0alpha.Metadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.storageproviderv0alpha.Metadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.storageproviderv0alpha.Metadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getMtime();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getIsDir();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getEtag();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getChecksum();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPermissions();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.cs3.storageproviderv0alpha.Permissions.serializeBinaryToWriter
    );
  }
  f = message.getMime();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getSys_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.cs3.storageproviderv0alpha.Metadata.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.cs3.storageproviderv0alpha.Metadata.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string filename = 2;
 * @return {string}
 */
proto.cs3.storageproviderv0alpha.Metadata.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.cs3.storageproviderv0alpha.Metadata.prototype.setFilename = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 size = 3;
 * @return {number}
 */
proto.cs3.storageproviderv0alpha.Metadata.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.cs3.storageproviderv0alpha.Metadata.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 mtime = 4;
 * @return {number}
 */
proto.cs3.storageproviderv0alpha.Metadata.prototype.getMtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.cs3.storageproviderv0alpha.Metadata.prototype.setMtime = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool is_dir = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.cs3.storageproviderv0alpha.Metadata.prototype.getIsDir = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.cs3.storageproviderv0alpha.Metadata.prototype.setIsDir = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string etag = 6;
 * @return {string}
 */
proto.cs3.storageproviderv0alpha.Metadata.prototype.getEtag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.cs3.storageproviderv0alpha.Metadata.prototype.setEtag = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string checksum = 7;
 * @return {string}
 */
proto.cs3.storageproviderv0alpha.Metadata.prototype.getChecksum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.cs3.storageproviderv0alpha.Metadata.prototype.setChecksum = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional Permissions permissions = 8;
 * @return {?proto.cs3.storageproviderv0alpha.Permissions}
 */
proto.cs3.storageproviderv0alpha.Metadata.prototype.getPermissions = function() {
  return /** @type{?proto.cs3.storageproviderv0alpha.Permissions} */ (
    jspb.Message.getWrapperField(this, proto.cs3.storageproviderv0alpha.Permissions, 8));
};


/** @param {?proto.cs3.storageproviderv0alpha.Permissions|undefined} value */
proto.cs3.storageproviderv0alpha.Metadata.prototype.setPermissions = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.cs3.storageproviderv0alpha.Metadata.prototype.clearPermissions = function() {
  this.setPermissions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cs3.storageproviderv0alpha.Metadata.prototype.hasPermissions = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string mime = 9;
 * @return {string}
 */
proto.cs3.storageproviderv0alpha.Metadata.prototype.getMime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.cs3.storageproviderv0alpha.Metadata.prototype.setMime = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional bytes sys = 12;
 * @return {string}
 */
proto.cs3.storageproviderv0alpha.Metadata.prototype.getSys = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes sys = 12;
 * This is a type-conversion wrapper around `getSys()`
 * @return {string}
 */
proto.cs3.storageproviderv0alpha.Metadata.prototype.getSys_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSys()));
};


/**
 * optional bytes sys = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSys()`
 * @return {!Uint8Array}
 */
proto.cs3.storageproviderv0alpha.Metadata.prototype.getSys_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSys()));
};


/** @param {!(string|Uint8Array)} value */
proto.cs3.storageproviderv0alpha.Metadata.prototype.setSys = function(value) {
  jspb.Message.setProto3BytesField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.storageproviderv0alpha.Permissions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.storageproviderv0alpha.Permissions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cs3.storageproviderv0alpha.Permissions.displayName = 'proto.cs3.storageproviderv0alpha.Permissions';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.storageproviderv0alpha.Permissions.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.storageproviderv0alpha.Permissions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.storageproviderv0alpha.Permissions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.storageproviderv0alpha.Permissions.toObject = function(includeInstance, msg) {
  var f, obj = {
    read: jspb.Message.getFieldWithDefault(msg, 1, false),
    write: jspb.Message.getFieldWithDefault(msg, 2, false),
    share: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.storageproviderv0alpha.Permissions}
 */
proto.cs3.storageproviderv0alpha.Permissions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.storageproviderv0alpha.Permissions;
  return proto.cs3.storageproviderv0alpha.Permissions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.storageproviderv0alpha.Permissions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.storageproviderv0alpha.Permissions}
 */
proto.cs3.storageproviderv0alpha.Permissions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRead(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWrite(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShare(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.storageproviderv0alpha.Permissions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.storageproviderv0alpha.Permissions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.storageproviderv0alpha.Permissions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.storageproviderv0alpha.Permissions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRead();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getWrite();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getShare();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional bool read = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.cs3.storageproviderv0alpha.Permissions.prototype.getRead = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.cs3.storageproviderv0alpha.Permissions.prototype.setRead = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool write = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.cs3.storageproviderv0alpha.Permissions.prototype.getWrite = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.cs3.storageproviderv0alpha.Permissions.prototype.setWrite = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool share = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.cs3.storageproviderv0alpha.Permissions.prototype.getShare = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.cs3.storageproviderv0alpha.Permissions.prototype.setShare = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.storageproviderv0alpha.DataChunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.storageproviderv0alpha.DataChunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cs3.storageproviderv0alpha.DataChunk.displayName = 'proto.cs3.storageproviderv0alpha.DataChunk';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.storageproviderv0alpha.DataChunk.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.storageproviderv0alpha.DataChunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.storageproviderv0alpha.DataChunk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.storageproviderv0alpha.DataChunk.toObject = function(includeInstance, msg) {
  var f, obj = {
    length: jspb.Message.getFieldWithDefault(msg, 1, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 2, 0),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.storageproviderv0alpha.DataChunk}
 */
proto.cs3.storageproviderv0alpha.DataChunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.storageproviderv0alpha.DataChunk;
  return proto.cs3.storageproviderv0alpha.DataChunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.storageproviderv0alpha.DataChunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.storageproviderv0alpha.DataChunk}
 */
proto.cs3.storageproviderv0alpha.DataChunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLength(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOffset(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.storageproviderv0alpha.DataChunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.storageproviderv0alpha.DataChunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.storageproviderv0alpha.DataChunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.storageproviderv0alpha.DataChunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLength();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional uint64 length = 1;
 * @return {number}
 */
proto.cs3.storageproviderv0alpha.DataChunk.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.cs3.storageproviderv0alpha.DataChunk.prototype.setLength = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 offset = 2;
 * @return {number}
 */
proto.cs3.storageproviderv0alpha.DataChunk.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.cs3.storageproviderv0alpha.DataChunk.prototype.setOffset = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes data = 3;
 * @return {string}
 */
proto.cs3.storageproviderv0alpha.DataChunk.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.cs3.storageproviderv0alpha.DataChunk.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.cs3.storageproviderv0alpha.DataChunk.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.cs3.storageproviderv0alpha.DataChunk.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.storageproviderv0alpha.Version = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.storageproviderv0alpha.Version, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cs3.storageproviderv0alpha.Version.displayName = 'proto.cs3.storageproviderv0alpha.Version';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.storageproviderv0alpha.Version.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.storageproviderv0alpha.Version.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.storageproviderv0alpha.Version} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.storageproviderv0alpha.Version.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    size: jspb.Message.getFieldWithDefault(msg, 2, 0),
    mtime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    isDir: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.storageproviderv0alpha.Version}
 */
proto.cs3.storageproviderv0alpha.Version.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.storageproviderv0alpha.Version;
  return proto.cs3.storageproviderv0alpha.Version.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.storageproviderv0alpha.Version} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.storageproviderv0alpha.Version}
 */
proto.cs3.storageproviderv0alpha.Version.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMtime(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDir(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.storageproviderv0alpha.Version.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.storageproviderv0alpha.Version.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.storageproviderv0alpha.Version} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.storageproviderv0alpha.Version.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMtime();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getIsDir();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.cs3.storageproviderv0alpha.Version.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.cs3.storageproviderv0alpha.Version.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 size = 2;
 * @return {number}
 */
proto.cs3.storageproviderv0alpha.Version.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.cs3.storageproviderv0alpha.Version.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 mtime = 3;
 * @return {number}
 */
proto.cs3.storageproviderv0alpha.Version.prototype.getMtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.cs3.storageproviderv0alpha.Version.prototype.setMtime = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool is_dir = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.cs3.storageproviderv0alpha.Version.prototype.getIsDir = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.cs3.storageproviderv0alpha.Version.prototype.setIsDir = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.storageproviderv0alpha.RecycleItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.storageproviderv0alpha.RecycleItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cs3.storageproviderv0alpha.RecycleItem.displayName = 'proto.cs3.storageproviderv0alpha.RecycleItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.storageproviderv0alpha.RecycleItem.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.storageproviderv0alpha.RecycleItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.storageproviderv0alpha.RecycleItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.storageproviderv0alpha.RecycleItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    filename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    size: jspb.Message.getFieldWithDefault(msg, 3, 0),
    deltime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    isDir: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.storageproviderv0alpha.RecycleItem}
 */
proto.cs3.storageproviderv0alpha.RecycleItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.storageproviderv0alpha.RecycleItem;
  return proto.cs3.storageproviderv0alpha.RecycleItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.storageproviderv0alpha.RecycleItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.storageproviderv0alpha.RecycleItem}
 */
proto.cs3.storageproviderv0alpha.RecycleItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDeltime(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDir(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.storageproviderv0alpha.RecycleItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.storageproviderv0alpha.RecycleItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.storageproviderv0alpha.RecycleItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.storageproviderv0alpha.RecycleItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getDeltime();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getIsDir();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.cs3.storageproviderv0alpha.RecycleItem.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.cs3.storageproviderv0alpha.RecycleItem.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string filename = 2;
 * @return {string}
 */
proto.cs3.storageproviderv0alpha.RecycleItem.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.cs3.storageproviderv0alpha.RecycleItem.prototype.setFilename = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 size = 3;
 * @return {number}
 */
proto.cs3.storageproviderv0alpha.RecycleItem.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.cs3.storageproviderv0alpha.RecycleItem.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 deltime = 4;
 * @return {number}
 */
proto.cs3.storageproviderv0alpha.RecycleItem.prototype.getDeltime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.cs3.storageproviderv0alpha.RecycleItem.prototype.setDeltime = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool is_dir = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.cs3.storageproviderv0alpha.RecycleItem.prototype.getIsDir = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.cs3.storageproviderv0alpha.RecycleItem.prototype.setIsDir = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.cs3.storageproviderv0alpha.ACLType = {
  ACL_TYPE_INVALID: 0,
  ACL_TYPE_USER: 1,
  ACL_TYPE_GROUP: 2
};

/**
 * @enum {number}
 */
proto.cs3.storageproviderv0alpha.ACLMode = {
  ACL_MODE_INVALID: 0,
  ACL_MODE_READONLY: 1,
  ACL_MODE_READWRITE: 2
};

goog.object.extend(exports, proto.cs3.storageproviderv0alpha);
